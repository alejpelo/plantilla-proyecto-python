{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a la plantilla","text":"<p>Plantilla para organizar proyectos que usan Python e incluye las mejores pr\u00e1cticas relacionadas con:</p> <ul> <li>Version control: Git</li> <li>Virtual environments y Dependency management: Poetry</li> <li>Static typing: Mypy</li> <li>Code formatting: Black</li> <li>Linting and Style enforcement: Ruff</li> <li>Package vulnerability analysis: Pip-audit</li> <li>Pre-Commit hooks: Pre-commit</li> <li>Documentation: MkDocs, Material for MkDocs, Google docstrings</li> <li>Configuration files: Hydra</li> <li>Logging: Loguru</li> </ul>"},{"location":"#uso","title":"Uso","text":"<p>Para instalar la plantilla y empezarla a usar en un nuevo proyecto, debe tener instalado previamente en su equipo, Git, Python1 (versi\u00f3n 3.11) y Poetry (versi\u00f3n &gt;=1.5).</p> <ol> <li>Cree un fork de este repositorio. Si ya ten\u00eda el fork, realice un sync fork para traer la versi\u00f3n m\u00e1s reciente. Otra opci\u00f3n es crear un nuevo repositorio a partir de este, para el nuevo proyecto.</li> <li>Clone el nuevo repositorio.</li> <li> <p>Aseg\u00farese que Poetry est\u00e1 usando la versi\u00f3n de Python adecuada para crear el ambiente virtual2 (i.e. 3.11) y ejecute:</p> <pre><code>poetry install\n</code></pre> </li> <li> <p>En el proyecto se usa pre-commit para automatizar la verificaci\u00f3n del c\u00f3digo antes de los commits y de los pushs. La librer\u00eda ya est\u00e1 incluida en las dependencias necesarias para contribuir al proyecto, sin embargo, es necesario configurarla usando las siguientes instrucciones:</p> <pre><code>pre-commit install\npre-commit install --hook-type pre-push\n</code></pre> </li> <li> <p>Consulte el archivo <code>src/proyecto/tutorial.py</code> para conocer c\u00f3mo usar los archivos de configuraci\u00f3n y el log.</p> </li> <li> <p>Consulte el archivo <code>docs/tutorial.md</code> para conocer las capacidades instaladas de la documentaci\u00f3n. Para trabajar en la documentaci\u00f3n, con el ambiente virtual activado, ejecute:</p> <pre><code>mkdocs serve\n</code></pre> <p>Esto har\u00e1 que la documentaci\u00f3n en se actualice en la medida que realice cambios.</p> <p>Al final para construir el sitio, ejecute:</p> <pre><code>mkdocs build\n</code></pre> <p>Y para deplegar la documentaci\u00f3n en el GitHub Pages, estando en la master/main branch, ejecute:</p> <pre><code>mkdocs gh-deploy\n</code></pre> </li> </ol> <p>Danger</p> <p>El proyecto tiene un makefile y un archivo shell que no corren en Windows por defecto. En Linux y MacOS funciona correctamente. En Windows, por el momento, es necesario remover el pre-commit que exporta los archivos de librar\u00edas requeridas de <code>.pre-commit-config.yaml</code>. y no usar el <code>Makefile</code>. Pr\u00f3ximamente se incluir\u00e1n las instrucciones para que todo funcione adecuadamente en Windows.</p> <p>Eso es todo, puede empezar con su nuevo proyecto.</p>"},{"location":"#librarias-utiles-para-los-proyectos","title":"Librar\u00edas \u00fatiles para los proyectos","text":"<ul> <li>Pandas</li> <li>Pydantic</li> <li>FastAPI</li> <li>Power tools for AWS Lambda</li> <li>Nox</li> </ul> <p>Para instalar una de estas librer\u00edas, o cualquier otra que vaya a utilizar, haciendo uso de Poetry, se debe ejecutar, por ejemplo:</p> <pre><code>poetry add pandas\n</code></pre> <p>Si la va a instalar solo para desarrollo, o en cualquier otro grupo de librer\u00edas, ejecutar:</p> <pre><code>poetry add nox --group dev\n</code></pre>"},{"location":"#lineamientos-para-contribuir-al-proyecto","title":"Lineamientos para Contribuir al Proyecto","text":"<p>Se deben seguir los siguientes lineamientos para para contribuir al desarrollo del proyecto. Esto garantiza que la trazabilidad y el versionamiento sea robusto.</p>"},{"location":"#workflow","title":"Workflow","text":"<p>Se utiliza Gitflow con la siguiente estructura de branches:</p> <ul> <li> <p>master/main branch: solo guarda los releases oficiales. Cada release debe estar identificado con su respectivo tag que hace alusi\u00f3n a la versi\u00f3n del c\u00f3digo (ver Versionamiento (tags)).</p> </li> <li> <p>develop branch: funciona como integrador de los distintos ajustes, cambios, correcciones, mejoras o adiciones (bug fixes o features) que se est\u00e1n desarrollando. Este es el branch del que se deben crear los forks para desarrollar correcciones, mejoras o adiciones en el c\u00f3digo.</p> </li> <li> <p>bugfix/ branches: Cada correcci\u00f3n debe residir en su propio branch. Siempre se deben crear a partir del develop branch.</p> </li> <li> <p>feature/ branches: Cada nuevo cambio, mejora o adici\u00f3n debe residir en su propio branch. Siempre se deben crear a partir del develop branch.</p> </li> <li> <p>release/ branches: Cuando se tienen acumulados varios cambios, mejoras, correcciones y/o adiciones, se crea un branch de este tipo desde el develop branch. Esto inicia el ciclo de release y a partir de este momento no se pueden a\u00f1adir nuevas mejoras o cambios al c\u00f3digo, en este branch, que no est\u00e9n relacionadas con la correcci\u00f3n de errores, la documentaci\u00f3n o tareas espec\u00edficas orientadas al proceso de release.</p> </li> <li> <p>hotfix/ branches: Usadas para reparar r\u00e1pidamente errores en la versi\u00f3n de producci\u00f3n (master branch). Este es el \u00fanico branch que se puede (y debe) crear a partir del master branch. Una vez terminada la correcci\u00f3n se fusiona nuevamente con el master branch, con el release- branch actual y con el develop branch. La fusi\u00f3n con el master branch debe llevar su respectiva tag con el n\u00famero de versi\u00f3n actualizado.</p> </li> </ul>"},{"location":"#commits","title":"Commits","text":"<p>Es obligatorio incluir un mensaje en cada commit. El mensaje debe utilizar la siguiente plantilla:</p> <pre><code>&lt;tipo&gt;: &lt;asunto&gt; (Si se aplica, este commit...)\n|&lt;----  Usar m\u00e1ximo 50 caracteres  ----&gt;|\n\nExplique por qu\u00e9 se realiza el cambio.\n|&lt;----  Trate de limitar cada l\u00ednea a m\u00e1ximo 72 caracteres  ----&gt;|\n\nProvea links o claves a cualquier ticket, art\u00edculo u otro recurso relevante para el commit\nEjemplo: Issue #23\n\n---- FIN DEL COMMIT ----\n\nType can be: \n    feat     nueva caracter\u00edstica\n    fix      correcci\u00f3n de error\n    style    formato (e.g. agregar comas que faltaban); no se cambia el c\u00f3digo\n    docs     cambios a la documentaci\u00f3n\n    test     a\u00f1adir o ajustar tests; no se cambia el c\u00f3digo de producci\u00f3n\n    chore    cambia configuraci\u00f3n CI/CD, pre-commits, etc.; no se cambia el c\u00f3digo de producci\u00f3n\n\n---------------\n\nRecuerde...\n    Empezar con may\u00fascula la l\u00ednea del asunto\n    Usar el modo imperativo en la l\u00ednea del asunto\n    No terminar la l\u00ednea del asunto con punto\n    Separar la l\u00ednea del asunto del cuerpo del commit (descripci\u00f3n) con una l\u00ednea en blanco\n    Usar el cuerpo del commit para explicar el qu\u00e9 y el por qu\u00e9, no el c\u00f3mo\n    Puede usar m\u00faltiple l\u00edneas con \"-\" para vi\u00f1etas en el cuerpo del commit\n</code></pre>"},{"location":"#versionamiento-tags","title":"Versionamiento (tags)","text":"<p>Se usa SemVer como lineamiento para el versionamiento. Para nombrar las tags se debe usar la forma <code>v0.0.0</code>.</p> <p>Para ver las versiones disponibles, consulte las tags en este repositorio.</p> <ol> <li> <p>Para instalar Python se recomienda usar pyenv para Linux o MacOS. En Windows la recomendaci\u00f3n es instalar Python con el instalador que se encuentra en la p\u00e1gina oficial.\u00a0\u21a9</p> </li> <li> <p>Poetry Managing Environments.\u00a0\u21a9</p> </li> </ol>"},{"location":"logger/","title":"Logger","text":"<p>Configuraci\u00f3n del logger.</p> <p>Este m\u00f3dulo contiene las funciones que permiten configurar y usar el logger para el proyecto.</p> <p>Se usa Loguru como librar\u00eda para gestionar el log.</p> <p>Author: Alejandro Perez Londo\u00f1o</p>"},{"location":"logger/#proyecto.logger.patching","title":"<code>patching(record)</code>","text":"<p>Parcha el record del log.</p> <p>Ajusta la informaci\u00f3n que va en recordextra</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>dict</code> <p>record del log definido por loguru</p> required Source code in <code>src/proyecto/logger.py</code> <pre><code>def patching(record: loguru.Record):\n\"\"\"Parcha el record del log.\n    Ajusta la informaci\u00f3n que va en record[extra][serialized]\n    Args:\n        record (dict): record del log definido por loguru\n    \"\"\"\nrecord[\"extra\"][\"serialized\"] = serialize(record)\n</code></pre>"},{"location":"logger/#proyecto.logger.serialize","title":"<code>serialize(record)</code>","text":"<p>Extrae y serializa en JSON la informaci\u00f3n del record para el log.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>dict</code> <p>record del log definido por loguru</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>subconjunto de informaci\u00f3n del record en formato JSON</p> Source code in <code>src/proyecto/logger.py</code> <pre><code>def serialize(record: loguru.Record) -&gt; str:\n\"\"\"Extrae y serializa en JSON la informaci\u00f3n del record para el log.\n    Args:\n        record (dict): record del log definido por loguru\n    Returns:\n        str: subconjunto de informaci\u00f3n del record en formato JSON\n    \"\"\"\nsubset = {\n\"timestamp\": record[\"time\"].timestamp(),\n\"time\": record[\"time\"].strftime(\"%Y-%m-%d %H:%M:%S.%f tz %z\"),\n\"level\": record[\"level\"].name,\n\"file\": record[\"file\"].name,\n\"line\": record[\"line\"],\n\"message\": record[\"message\"],\n}\nreturn json.dumps(subset, ensure_ascii=False)\n</code></pre>"},{"location":"tutorial/","title":"Tutorial documentaci\u00f3n","text":"<p>A continuaci\u00f3n se incluyen algunos ejemplos para que funcionen como tutorial de las capacidades que est\u00e1n activas en la documentaci\u00f3n.</p>"},{"location":"tutorial/#formato","title":"Formato","text":"<p>El texto puede ser borrado y se puede reemplazar con texto agregado. Esto tambi\u00e9n se puede combinar en unauna simple operaci\u00f3n. Resaltar tambi\u00e9n es posible  y se pueden agregar comentarios en l\u00ednea.</p> <ul> <li>Esto se resalt\u00f3</li> <li>Esto se insert\u00f3</li> <li> <p>Esto se borr\u00f3</p> </li> <li> <p>H2O</p> </li> <li>ATA</li> </ul> <p>Ctrl+Alt+Del</p>"},{"location":"tutorial/#call-outs","title":"Call outs","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctormassa, nec semper lorem quam in massa.</p>"},{"location":"tutorial/#botones","title":"Botones","text":"<p>Enviar  Enviar</p>"},{"location":"tutorial/#codigo","title":"C\u00f3digo","text":"Importar TensorFlow<pre><code># (1)\nimport tensorflow as tf # (2)!\n</code></pre> <ol> <li> <p>Para bloques sin t\u00edtulo, remover <code>title=\"...\"</code></p> </li> <li> <p> Soy una anotaci\u00f3n! Puedo contener <code>c\u00f3digo</code>, texto con     formato, im\u00e1genes, ... b\u00e1sicamente cualquier cosa que se pueda escribir     con Markdown.</p> </li> </ol>"},{"location":"tutorial/#pestanas","title":"Pesta\u00f1as","text":"Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol>"},{"location":"tutorial/#tablas","title":"Tablas","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"tutorial/#diagramas","title":"Diagramas","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"tutorial/#pies-de-pagina","title":"Pies de P\u00e1gina","text":"<p>Lorem ipsum1 dolor sit amet, consectetur adipiscing elit.2</p>"},{"location":"tutorial/#imagenes","title":"Im\u00e1genes","text":"Image caption"},{"location":"tutorial/#matematicas","title":"Matem\u00e1ticas","text":"<p>$$ \\operatorname{ker} f={g\\in G:f(g)=e_{H}} $$</p> <p>The homomorphism $f$ is injective if and only if its kernel is only the singleton set $e_G$, because otherwise $\\exists a,b\\in G$ with $a\\neq b$ such that $f(a)=f(b)$.</p>"},{"location":"tutorial/#tooltips","title":"Tooltips","text":"<p>Hover me</p> <p>The HTML specification is maintained by the W3C.</p> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Prueba ...\u00a0\u21a9</p> </li> </ol>"}]}