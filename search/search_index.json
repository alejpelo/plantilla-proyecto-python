{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentaci\u00f3n de la plantilla","text":""},{"location":"#descripcion","title":"Descripci\u00f3n","text":"<p>Plantilla para organizar proyectos que usan Python e incorpora mejores pr\u00e1cticas relacionadas con:</p> <ul> <li>Version control: Git (libro: Pro Git, tutorial: Getting Git Right: Learn Git with Tutorials, News and Tips)</li> <li>Project management, Virtual environments y Dependencies management: uv</li> <li>Static typing: mypy</li> <li>Code formatting, Linting y Style enforcement: Ruff</li> <li>Package vulnerability analysis: pip-audit</li> <li>Pre-Commit hooks: pre-commit</li> <li>Documentation: MkDocs, Material for MkDocs, Google docstrings</li> <li>Environmental variables y <code>.env</code> files: Pydantic-Settings</li> <li>Logging: Loguru</li> <li>Debugging: The Python Debugger (tutorial: Python Debugging With Pdb), IceCream</li> <li>Testing: pytest (tutorial: Effective Python Testing With Pytest), pytest-cov</li> </ul> <p>Opcionalmente:</p> <ul> <li><code>dvc</code>: Data version control: DVC, (ver p\u00e1gina Data version control para m\u00e1s detalles)</li> <li><code>notebooks</code>: Jupyter notebooks: Jupyter kernels for Spyder and VS Code</li> </ul>"},{"location":"#estructura","title":"Estructura","text":"<p>El proyecto usa la siguiente estructura de carpetas y archivos:</p> <p> </p> Estructura de carpetas y archivos del proyecto <p>A continuaci\u00f3n se describe el prop\u00f3sito de cada una de las carpetas:</p> <code>data/</code> <p>Carpeta para almacenar los archivos de datos (e.g. archivos <code>.csv</code>, <code>.parquet</code>, <code>.xlsx</code>, ...). Dentro de la carpeta se pueden crear sub-carpetas para almacenar los datos en distintos estados (e.g. crudos (raw), pre-procesados, procesados, ...).</p> <p>Esta carpeta NO debe estar versionada con Git, y por defecto, est\u00e1 incluida en el <code>.gitignore</code>. </p> <p>Se incluye una sub-carpeta especial (<code>querys/</code>) destinada a almacenar los querys (archivos <code>.sql</code>) que se utilizan para generar los datos. Esta sub-carpeta si se debe versionar en Git, y por defecto, est\u00e1 configurada para que as\u00ed sea.</p> <p>Para hacer versionamiento de los datos y/o modelos, se debe hacer uso lo explicado en la pr\u00e1ctica relacionada con Data version control.</p> <code>docs/</code> <p>Carpeta para almacenar y gestionar la documentaci\u00f3n del proyecto. Se administra usando MkDocs, Material for MkDocs y Google docstrings.</p> <code>notebooks/</code> <p>Carpeta para almacenar los cuadernos (notebooks. Archivos <code>.ipynb</code>) que utilice en el proyecto. Si va a utilizar esta carpeta debe usar la pr\u00e1ctica opcional Jupyter notebooks compatibility y seguir las instrucciones para hacer un adecuado versionamiento de los cuadernos.</p> <code>outputs/</code> <p>Carpeta para almacenar los archivos de resultados (e.g. archivos <code>.pdf</code>, <code>.png</code>, <code>.csv</code>, <code>.parquet</code>, <code>.xlsx</code>, ...). Dentro de la carpeta se pueden crear sub-carpetas para almacenar distintos tipos de resultados (e.g. informes, gr\u00e1ficos, resultados ...).</p> <p>Esta carpeta NO debe estar versionada con Git, y por defecto, est\u00e1 incluida en el <code>.gitignore</code>.</p> <p>Para hacer versionamiento de los datos que hagan parte de los resultados, y por lo tanto se almacenen dentro de esta carpeta, se debe hacer uso lo explicado en la pr\u00e1ctica relacionada con Data version control.</p> <p>Si genera informes, se recomienda que en ellos incluya el tag que identifica la versi\u00f3n del proyecto que permite reproducirlo. De esta manera, en cualquier otro momento es posible recrear los datos, modelos y c\u00f3digo que permite llegar a los mismos resultados.</p> <code>src/</code> <p>Carpeta para almacenar el c\u00f3digo (archivos  <code>.py</code>). Dentro de la carpeta se pueden crear sub-carpetas para organizar el c\u00f3digo adecuadamente.</p> <code>tests/</code> <p>Carpeta para almacenar las pruebas del proyecto (archivos  <code>.py</code>). Dentro de la carpeta se pueden crear sub-carpetas para organizar las pruebas adecuadamente. Las pruebas se deben escribir usando pytest.</p>"},{"location":"#uso","title":"Uso","text":"<p>Para instalar la plantilla y empezarla a usar en un nuevo proyecto, debe tener instalado previamente en su equipo, Git (versi\u00f3n &gt;= 2.49.0) y uv (versi\u00f3n &gt;= 0.7.3).</p> <p>\u00a1Atenci\u00f3n!</p> <p>El proyecto tiene un <code>makefile</code> y un archivo shell (<code>write-requirements.sh</code>) que no corren en WindowsOS por defecto. Por lo tanto es necesario instalar si est\u00e1 utilizando este sistema operativo, adicionalmente, Make. (Tutorial: How to setup/install GNU make on Windows).</p> <p>Si sigui\u00f3 las instrucciones descritas anteriormente, todas las funcionalidades de la plantilla debe funcionar adecuadamente tanto en WindowsOS, como en MacOS y LinuxOS. Si se le presentan errores:</p> <ol> <li>Es necesario remover el pre-commit que exporta los archivos de librar\u00edas requeridas de <code>.pre-commit-config.yaml</code>. y no usar <code>make</code>.</li> <li>Agradecemos lo reporte para buscar una soluci\u00f3n.</li> </ol> <p>Posteriormente, siga los pasos descritos a continuaci\u00f3n:</p> <ol> <li> <p>Cree un nuevo repositorio a partir de esta plantilla (template) con el nombre de su nuevo proyecto. Aseg\u00farese de marcar la opci\u00f3n Include all branches.</p> </li> <li> <p>Clone el nuevo repositorio en su equipo local.</p> </li> <li> <p>Instale el proyecto, ejecutando:</p> <pre><code>uv sync --extra tests --extra docs\n</code></pre> <p>Si desea usar algunas de las librer\u00edas que proporcionan mejores pr\u00e1cticas opcionales, ejecute:</p> <pre><code>uv sync --extra tests --extra docs --extra &lt;pr\u00e1ctica opcional&gt; # (1)!\n</code></pre> <ol> <li>Debe reemplazar <code>&lt;pr\u00e1ctica opcional&gt;</code> por el c\u00f3digo de la pr\u00e1ctica opcional. Por ejemplo: <code>... --extra dvc</code>.</li> </ol> <p>Si desea usar m\u00e1s de una pr\u00e1ctica opcional, simplemente repita <code>--extra &lt;pr\u00e1ctica opcional&gt;</code> las veces que necesite al final de la instrucci\u00f3n.</p> <p>\u00a1Atenci\u00f3n!</p> <p>Si opta por usar la opci\u00f3n <code>notebooks</code>, debe agregar a su archivo de configuraci\u00f3n de git (<code>gitconfig</code>)<sup>1</sup> las siguientes instrucciones al final del mismo:</p> <pre><code>[filter \"strip-notebook-output\"]\nclean = \"uvx jupyter nbconvert --ClearOutputPreprocessor.enabled=True --ClearMetadataPreprocessor.enabled=True --to=notebook --stdin --stdout --log-level=ERROR\"\n</code></pre> <p>Esto le indica a git que al agregar un archivo <code>.ipynb</code> al stage, debe crearle una copia en la que limpie la metadata y los outputs. De esta forma se optimiza el versionamiento de este tipo de archivos, y se garantiza que en el equipo local del usuario se mantienen tanto la metadata como los outputs. </p> </li> <li> <p>En el proyecto se usa pre-commit para automatizar la verificaci\u00f3n del c\u00f3digo antes de los commits y de los pushs. La librer\u00eda ya est\u00e1 incluida en las dependencias necesarias para contribuir al proyecto, sin embargo, es necesario configurarla usando las siguientes instrucciones:</p> <pre><code>uv run pre-commit install\nuv run pre-commit install --hook-type pre-commit\nuv run pre-commit install --hook-type pre-push\n</code></pre> </li> <li> <p>Consulte el archivo <code>src/tutorial.py</code> para conocer c\u00f3mo usar las variables de entorno, el log y c\u00f3mo hacer debugging f\u00e1cilmente.</p> </li> <li> <p>Consulte el archivo <code>docs/tutorial.md</code> para conocer las capacidades instaladas para documentar el proyecto. Para trabajar en la documentaci\u00f3n, ejecute:</p> <pre><code>uv run mkdocs serve\n</code></pre> <p>Esto le permitir\u00e1 ver en el explorador la versi\u00f3n final de la documentaci\u00f3n y har\u00e1 que esta se actualice en l\u00ednea en la medida que realice cambios.</p> </li> </ol> <p>\u00a1Eso es todo!, puede empezar a trabajar en su nuevo proyecto.</p> <ol> <li> <p>Este archivo se encuentra en la siguiente ruta: <code>~/gitconfig</code>.\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorial/","title":"Tutorial documentaci\u00f3n","text":"<p>A continuaci\u00f3n se incluyen algunos ejemplos para que funcionen como tutorial de las capacidades que est\u00e1n activas en la documentaci\u00f3n. Para conocer m\u00e1s vaya a Material for MkDocs</p>"},{"location":"tutorial/#formato","title":"Formato","text":"<p>El texto puede ser borrado y se puede reemplazar con texto agregado. Esto tambi\u00e9n se puede combinar en unauna simple operaci\u00f3n. Resaltar tambi\u00e9n es posible  y se pueden agregar comentarios en l\u00ednea.</p> <ul> <li>Esto se resalt\u00f3</li> <li>Esto se insert\u00f3</li> <li> <p>Esto se borr\u00f3</p> </li> <li> <p>H<sub>2</sub>O</p> </li> <li>A<sup>T</sup>A</li> </ul> <p>Ctrl+Alt+Del</p>"},{"location":"tutorial/#call-outs","title":"Call outs","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctormassa, nec semper lorem quam in massa.</p>"},{"location":"tutorial/#botones","title":"Botones","text":"<p>Enviar  Enviar</p>"},{"location":"tutorial/#codigo","title":"C\u00f3digo","text":"Importar TensorFlow<pre><code># (1)\nimport tensorflow as tf # (2)!\n</code></pre> <ol> <li> <p>Para bloques sin t\u00edtulo, remover <code>title=\"...\"</code></p> </li> <li> <p> Soy una anotaci\u00f3n! Puedo contener <code>c\u00f3digo</code>, texto con     formato, im\u00e1genes, ... b\u00e1sicamente cualquier cosa que se pueda escribir     con Markdown.</p> </li> </ol>"},{"location":"tutorial/#pestanas","title":"Pesta\u00f1as","text":"Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol>"},{"location":"tutorial/#tablas","title":"Tablas","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"tutorial/#diagramas","title":"Diagramas","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"tutorial/#pies-de-pagina","title":"Pies de P\u00e1gina","text":"<p>Lorem ipsum<sup>1</sup> dolor sit amet, consectetur adipiscing elit.<sup>2</sup></p>"},{"location":"tutorial/#imagenes","title":"Im\u00e1genes","text":"Image caption"},{"location":"tutorial/#matematicas","title":"Matem\u00e1ticas","text":"<p>$$ \\operatorname{ker} f={g\\in G:f(g)=e_{H}} $$</p> <p>The homomorphism $f$ is injective if and only if its kernel is only the singleton set $e_G$, because otherwise $\\exists a,b\\in G$ with $a\\neq b$ such that $f(a)=f(b)$.</p>"},{"location":"tutorial/#tooltips","title":"Tooltips","text":"<p>Hover me</p> <p>The HTML specification is maintained by the W3C.</p> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Prueba ...\u00a0\u21a9</p> </li> </ol>"},{"location":"codigo/configuracion/","title":"Configuraci\u00f3n","text":"<p>Variables de Configuraci\u00f3n y Variables de Entorno.</p> <p>Este m\u00f3dulo contiene las funciones que permiten leer los archivos .env con las variables de configuraci\u00f3n tanto p\u00fablicas (que se comparten con el proyecto), como aquellas privadas (secrets) que no se comparten y cada usuario del proyecto debe alimentar.</p> <p>Esta forma de trabajar permite tener adecuadas pr\u00e1cticas de seguridad para no compartir informaci\u00f3n sensible como por ejemplo: contrase\u00f1as, nombres de usuario, entre otros.</p> <p>En la ra\u00edz del proyecto debe haber dos archivos:</p> <ul> <li> <p><code>.env.public</code>: archivo con variables de configuraci\u00f3n p\u00fablicas. Este archivo     SI se agrega al versionamiento y SI va al repositorio.</p> </li> <li> <p><code>.env.private</code>: archivo con variables de configuraci\u00f3n privadas. Este     archivo NO se agrega al versionamiento y NO va al repositorio.</p> </li> </ul> <p>Se usa Pydantic-Settings como librar\u00eda para leer los archivos con las variables de entorno.</p> <p>Author: Alejandro Perez Londo\u00f1o</p>"},{"location":"codigo/configuracion/#configuracion.Configuracion","title":"<code>Configuracion</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Lee y valida las variables de configuraci\u00f3n de los archivos .env.</p> Source code in <code>src/configuracion.py</code> <pre><code>class Configuracion(BaseSettings):\n    \"\"\"Lee y valida las variables de configuraci\u00f3n de los archivos .env.\"\"\"\n\n    model_config = SettingsConfigDict(\n        env_file=(DOTENVPUBLIC, DOTENVPRIVATE),\n    )\n\n    # Las variables de configuraci\u00f3n que aparecen de aqu\u00ed para abajo se deben\n    # ajustar dependiendo de las variables que est\u00e9n incluidas en los archivos\n    # .env (.env.public y .env.private)\n\n    domain: str = Field(alias=\"DOMAIN\")\n    admin_email: str = Field(alias=\"ADMIN_EMAIL\")\n    root_url: str = Field(alias=\"ROOT_URL\")\n\n    password: str = Field(alias=\"PASSWORD\", min_length=8)\n    secret_access_key: str = Field(alias=\"SECRET_ACCESS_KEY\", min_length=20)\n</code></pre>"},{"location":"codigo/logger/","title":"Log","text":"<p>Configuraci\u00f3n del logger.</p> <p>Este m\u00f3dulo contiene las funciones que permiten configurar y usar el logger para el proyecto.</p> <p>Se usa Loguru como librar\u00eda para gestionar el log.</p> <p>Author: Alejandro Perez Londo\u00f1o</p>"},{"location":"codigo/logger/#logger.patching","title":"<code>patching(record)</code>","text":"<p>Parcha el record del log.</p> <p>Ajusta la informaci\u00f3n que va en el log</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>dict</code> <p>record del log definido por loguru</p> required Source code in <code>src/logger.py</code> <pre><code>def patching(record: loguru.Record):\n    \"\"\"Parcha el record del log.\n\n    Ajusta la informaci\u00f3n que va en el log\n\n    Args:\n        record (dict): record del log definido por loguru\n    \"\"\"\n    record[\"extra\"][\"serialized\"] = serialize(record)\n</code></pre>"},{"location":"codigo/logger/#logger.serialize","title":"<code>serialize(record)</code>","text":"<p>Extrae y serializa en JSON la informaci\u00f3n del record para el log.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>dict</code> <p>record del log definido por loguru</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>subconjunto de informaci\u00f3n del record en formato JSON</p> Source code in <code>src/logger.py</code> <pre><code>def serialize(record: loguru.Record) -&gt; str:\n    \"\"\"Extrae y serializa en JSON la informaci\u00f3n del record para el log.\n\n    Args:\n        record (dict): record del log definido por loguru\n\n    Returns:\n        str: subconjunto de informaci\u00f3n del record en formato JSON\n    \"\"\"\n    subset = {\n        \"timestamp\": record[\"time\"].timestamp(),\n        \"time\": record[\"time\"].strftime(\"%Y-%m-%d %H:%M:%S.%f tz %z\"),\n        \"level\": record[\"level\"].name,\n        \"file\": record[\"file\"].name,\n        \"line\": record[\"line\"],\n        \"message\": record[\"message\"],\n    }\n    return json.dumps(subset, ensure_ascii=False)\n</code></pre>"},{"location":"codigo/tutorial/","title":"Tutorial","text":"<p>Tutorial para configuration files y log.</p> <p>Este m\u00f3dulo muestra como usar:</p> <ul> <li>El archivo con variables de entorno.</li> <li>El archivo de configuraci\u00f3n desde cualquier parte del proyecto.</li> <li>El log desde cualquier m\u00f3dulo del proyecto.</li> </ul> <p>La idea es que el usuario borre este archivo y ajuste el archivo de configuraci\u00f3n de prueba una vez est\u00e9 familiarizado con lo que aqu\u00ed se muestra.</p> <p>Author: Alejandro Perez Londo\u00f1o</p>"},{"location":"codigo/tutorial/#tutorial.my_app","title":"<code>my_app()</code>","text":"<p>Usa archivos de configuraci\u00f3n y variables de entorno en la aplicaci\u00f3n.</p> <ul> <li>Lleva al log todas las variables de los archivos .env.public y     .env.private</li> <li>Lleva al log todas las variables del archivo de configuraci\u00f3n de prueba     que est\u00e1 en conf/main.yaml</li> </ul> Source code in <code>src/tutorial.py</code> <pre><code>def my_app() -&gt; None:\n    \"\"\"Usa archivos de configuraci\u00f3n y variables de entorno en la aplicaci\u00f3n.\n\n    - Lleva al log todas las variables de los archivos .env.public y\n        .env.private\n    - Lleva al log todas las variables del archivo de configuraci\u00f3n de prueba\n        que est\u00e1 en conf/main.yaml\n    \"\"\"\n    ic.configureOutput(prefix=\"debug | \")\n\n    # \u00bfC\u00f3mo usar una variable de configuraci\u00f3n cargada en los .env?\n\n    ic(configuracion.admin_email)\n\n    log.debug(\"Variables de Entorno: {}\", configuracion)\n\n    # \u00bfC\u00f3mo \"logear\" algo en cualquier m\u00f3dulo?\n    log.debug(\n        \"Si est\u00e1 usando Python {}, es, por supuesto, preferible {feature}!\",\n        \"&gt;=3.6\",\n        feature=\"f-strings\",\n    )\n    log.info(\"Eso es todo, log f\u00e1cil!\")\n\n    # \u00bfC\u00f3mo agregar m\u00e1s informaci\u00f3n al log (agregar contexto)?\n    log_contextualizado = log.bind(cliente_id=\"001\", producto_id=\"123\")\n    log_contextualizado.info(\"F\u00e1cil, log con informaci\u00f3n adicional\")\n\n    # \u00bfC\u00f3mo hacer debugging (imprimir informaci\u00f3n durante la ejecuci\u00f3n)?\n    x = 1\n    y = 2\n\n    z = x + y\n\n    ic(x)\n    ic(z)\n</code></pre>"},{"location":"otros/dvc/","title":"Data version control","text":""},{"location":"otros/dvc/#que-es","title":"\u00bfQu\u00e9 es?","text":"Versionamiento de datos y modelos junto con el c\u00f3digo (en Git) <p>El versionamiento de datos y modelos es una t\u00e9cnica que permite hacerle trazabilidad a \"archivos\" de datos o modelos, que normalmente son m\u00e1s pesados (10s-100s MB a 10s GB, incluso en ocasiones TBs), junto con el versionamiento del c\u00f3digo. El objetivo es que en adici\u00f3n y concordancia con el c\u00f3digo, se puedan \"versionar\" los datos de entrada y/o los modelo entrenados para hacer el proyecto completamente reproducible en cualquiera de sus etapas de desarrollo.</p>"},{"location":"otros/dvc/#como-funciona","title":"\u00bfC\u00f3mo funciona?","text":"<p>Git no est\u00e1 dise\u00f1ado para versionar archivos de gran tama\u00f1o o archivos binarios. Su uso est\u00e1 optimizado para versionar archivos de texto de poco peso (archivos con c\u00f3digo fuente). Por lo tanto, para versionar archivos de datos/modelos junto con el c\u00f3digo, se debe utilizar una t\u00e9cnica indirecta.</p> <p>Esta t\u00e9cnica indirecta est\u00e1 implementada en una herramienta (DVC) que se instala en el proyecto al hacer uso de la opci\u00f3n <code>uv sync ... --extra dvc</code>.</p> <p>DVC funciona 1) generando archivos de texto livianos con metadatos sobre los archivos pesados que se agregan a Git para identificar una versi\u00f3n espec\u00edfica de estos archivos y as\u00ed poderlos recrear en cualquier momento y 2) almacenando de forma \u00f3ptima estos archivos por fuera del proyecto. Para almacenar las versiones de estos archivos de forma \u00f3ptima se utilizan repositorios (buckets) en la nube que ofrecen gran capacidad a precios competitivos.</p> <p>Costos asociados</p> <p>Como se explic\u00f3 previamente, el versionamiento de datos y/o modelos requiere disponer un \"lugar\" para almacenar las distintas versiones de estos archivos. La forma m\u00e1s eficiente de almacenar estos archivos es en la nube, sin embargo esto no es libre de costo. Almacenar un 1TB en la nube tiene un costo que oscila entre USD 6 y USD 26, m\u00e1s el costo de descargar los archivos una vez est\u00e9n almacenados que oscila entre USD 0.01/GB y USD 0.11/GB.</p> <p>Por lo anterior, es muy importante ser racional y consiente sobre los archivos de datos y/o modelos que se van a versionar ya que esto conllevar\u00e1 un costo. El objetivo debe ser contar con las versiones clave de estos archivos versionadas, es decir, aquellas datos necesarios para estimar modelos o los modelos ya entrenados que se est\u00e9n utilizado oficialmente (en ambiente de producci\u00f3n).</p> <p>Opci\u00f3n de repositorio en la nube</p> <p>Backblaze ofrece un servicio de almacenamiento en la nube (B2 Cloud Storage), que adem\u00e1s de cumplir con los m\u00e1s altos est\u00e1ndares de calidad y seguridad de los otros operadores (e.g. Amazon Web Services, Microsoft Azure o Google Cloud), es 3x m\u00e1s econ\u00f3mico.</p>"},{"location":"otros/dvc/#uso","title":"Uso","text":"<p>Despu\u00e9s de haber \"instalado\" el proyecto aplicando la mejor pr\u00e1ctica asociada con data version control (<code>uv sync ... --extra dvc</code>), que habilita la herramienta (DVC) para hacer versionamiento de datos y/o modelos, se debe inicializar y configurar para poderla empezar a utilizar.</p>"},{"location":"otros/dvc/#inicializar-dvc","title":"Inicializar DVC","text":"<p>Las siguientes instrucciones inicializan el uso de DVC en el proyecto y apagan la opci\u00f3n de recopilaci\u00f3n de anal\u00edtica.</p> <pre><code>uv run dvc init\n\nuv run dvc config core.analytics false\n</code></pre>"},{"location":"otros/dvc/#configurar-el-bucket","title":"Configurar el bucket","text":"<p>Las siguientes instrucciones configuran el repositorio en la nube (bucket) en el que que se almacenar\u00e1n los archivos de datos y/o modelos. A continuaci\u00f3n se ilustra la configuraci\u00f3n haciendo uso del servicio B2 Cloud Storage, sin embargo tenga presente que puede utilizar otros<sup>1</sup>.</p> <pre><code>uv run dvc remote add -d backblaze s3://&lt;bucket name/folder&gt;\nuv run dvc remote modify backblaze endpointurl https://s3.&lt;region&gt;.backblazeb2.com\n</code></pre> <p>Las anteriores instrucciones agregan el repositorio y le indican a DVC la url donde puede consultarlos. Tenga presente que previamente debe haber creado una cuenta en Backblaze, debe haber creado el Bucket all\u00ed y debe contar con una Application Key con permiso de lectura y escritura sobre el bucket.</p> <p>Atenci\u00f3n</p> <p>Recuerde modificar <code>&lt;bucket name/folder&gt;</code> con el nombre del bucket previamente creado, y si as\u00ed lo desea, una ruta espec\u00edfica dentro del bucket (i.e. <code>bucket/carpeta/otraCarpeta...</code>). Asimismo, recuerde modificar la <code>region</code> en la que est\u00e1 ubicado el bucket.</p> <p>Posteriormente, es preciso configurar las credenciales para poder acceder al bucket. Para esto, se deben ejecutar las siguientes instrucciones:</p> <pre><code>dvc remote modify --local backblaze access_key_id '&lt;keyID&gt;'\ndvc remote modify --local backblaze secret_access_key '&lt;applicationKey&gt;'\n</code></pre> <p>Atenci\u00f3n</p> <p>Recuerde modificar <code>&lt;keyID&gt;</code> y <code>&lt;applicationKey&gt;</code> los datos de la Application Key creada previamente.</p> <p>Seguridad</p> <p>Por seguridad, las credenciales no se incluir\u00e1n en el versionamiento en Git ni en DVC. Estas quedar\u00e1n guardadas, \u00fanicamente, en su equipo local. Por lo tanto, en el futuro cuando otra persona clone el proyecto, deber\u00e1 ejecutar las dos instrucciones anteriores para configurar, en su equipo, la informaci\u00f3n necesaria para poder interactuar con el repositorio en la nube (i.e. poder agregar y/o consultar versiones de los datos o modelos). No es necesario que ejecute las otras instrucciones porque el proyecto ya tendr\u00e1 configurado DVC para hacer versionamiento de datos y/o modelos.</p> <p>Finalmente, aseg\u00farese de agregar a su repositorio Git la configuraci\u00f3n agregada. Para esto, ejecute las siguientes instrucciones:</p> <pre><code>git add .dvcignore .dvc/.gitignore .dvc/config\ngit commit -m \"feat: Inicializa configuraci\u00f3n para hacer data version control\"\n</code></pre>"},{"location":"otros/dvc/#versionar-archivos","title":"\"Versionar\" archivos","text":"<p>Una vez configurado DVC tal como se indic\u00f3 anteriormente, para \"versionar\" un archivo, siga los siguientes pasos:</p> <ol> <li>Agregue el archivo, a la carpeta <code>data/</code> del proyecto.</li> <li>Ind\u00edquele a DVC que debe versionar el archivo. Para esto ejecute la siguiente instrucci\u00f3n: <code>uv run dvc add data/&lt;nombre archivo&gt;</code>. No olvide reemplazar <code>&lt;nombre archivo&gt;</code> por el nombre del archivo, con su respectiva extensi\u00f3n, que agreg\u00f3 en el punto 1.</li> <li>Ind\u00edquele a Git que agregue el archivo (<code>.dvc</code>) con la metadata que identifica la versi\u00f3n especifica del archivo de datos. Para esto, ejecute: <code>git add data/&lt;nombre archivo&gt;.dvc</code>. No olvide reemplazar <code>&lt;nombre archivo&gt;</code> por el nombre del archivo, con su respectiva extensi\u00f3n, que agreg\u00f3 en el punto 1.</li> <li>Haga commit en Git para dejar trazabilidad del archivo de datos por medio del archivo con la metadata. Para esto ejecute: <code>git commit -m \"data: &lt;mensaje&gt;\"</code>. No olvide reemplazar <code>&lt;mensaje&gt;</code> por un texto que identifique adecuadamente los datos/modelos que est\u00e1 versionando.</li> <li>Configure la omisi\u00f3n de los headers no compatibles con Backblaze. Para esto ejecute: <code>export AWS_REQUEST_CHECKSUM_CALCULATION=WHEN_REQUIRED</code> y <code>export AWS_RESPONSE_CHECKSUM_VALIDATION=WHEN_REQUIRED</code>.</li> <li>Suba el archivo al bucket. Para esto ejecute: <code>uv run dvc push</code>.</li> <li>Sincronice el repositorio git local con la versi\u00f3n en la nube. Para esto ejecute: <code>git push</code>.</li> </ol> <p>Atenci\u00f3n</p> <p>Dependiendo el tama\u00f1o del archivo de datos/modelos que est\u00e9 versionando, instrucci\u00f3n <code>uv run dvc push</code> puede tomar un tiempo considerable.</p> <p>Pro tip</p> <p>Puede \"versionar\" varios archivos de datos/modelos simult\u00e1neamente, para esto, debe solo debe ajustar las instrucciones 1, 2 y 3 como se indica a continuaci\u00f3n:</p> <ol> <li>Agregue todos los archivos a la carpeta <code>data/</code>.</li> <li>Agregue tantos <code>data/&lt;nombre archivo&gt;</code> como sea necesario, separ\u00e1ndolos con un espacio, a la instrucci\u00f3n <code>uv run dvc add</code>.</li> <li>Agregue tantos <code>data/&lt;nombre archivo&gt;.dvc</code> como sea necesario, separ\u00e1ndolos con un espacio, a la instrucci\u00f3n <code>git add</code>.</li> </ol>"},{"location":"otros/dvc/#descargar-versiones","title":"Descargar versiones","text":"<p>Para sincronizar (descargar) su versi\u00f3n local del proyecto con todas las versiones de los archivos de datos/modelos versionados que se han subido al bucket, ejecute la siguiente instrucci\u00f3n:</p> <pre><code>uv run dvc pull\n</code></pre> <p>Atenci\u00f3n</p> <p>Dependiendo que tantos archivos sean y el tama\u00f1o de estos, esta instrucci\u00f3n puede tomar un tiempo considerable.</p>"},{"location":"otros/dvc/#cambiar-de-version","title":"Cambiar de versi\u00f3n","text":"<p>Para cambiar a la versi\u00f3n de un archivo de datos/modelo que se haya versionado previamente, primero debe ir al commit de Git en el que se version\u00f3 el archivo y luego hacer <code>checkout</code> con DVC. Para realizar esto, ejecute las siguientes instrucciones:</p> <pre><code>git checkout &lt;commit&gt;\nuv run dvc checkout\n</code></pre> <p>Atenci\u00f3n</p> <p>Recuerde modificar <code>&lt;commit&gt;</code> con c\u00f3digo del commit en el que \"version\u00f3\" la versi\u00f3n del archivo de datos/modelos que quiere consultar nuevamente.</p> <ol> <li> <p>Visite DVC / Data Management / Remote Storage para consultar otros servicios disponibles y la forma c\u00f3mo se lleva a cabo su configuraci\u00f3n.\u00a0\u21a9</p> </li> </ol>"},{"location":"otros/librerias/","title":"Librer\u00edas adicionas","text":""},{"location":"otros/librerias/#uso","title":"Uso","text":"<p>Para instalar una librer\u00eda adicional al proyecto, se debe ejecutar, por ejemplo:</p> <pre><code>uv add numpy\n</code></pre> <p>Si la va a instalar solo para desarrollo (dev), ejecutar:</p> <pre><code>uv add nox --dev\n</code></pre>"},{"location":"otros/librerias/#algunas-librarias-utiles-para-los-proyectos","title":"Algunas librar\u00edas \u00fatiles para los proyectos","text":"<ul> <li>Scientific and Numerical Computing: NumPy, SciPy</li> <li>Dataframes: Polars, Pandas (tutorial: Pandas Illustrated: The Definitive Visual Guide to Pandas)</li> <li>Graphics / Plots: matplotlib, Seaborn, Plotnine, Plotly, Bokeh</li> <li>Data Validation: Pydantic</li> <li>Machine Learning / Deep Learning: Scikit-learn, Keras, PyTorch</li> <li>In Memory DB: Duck DB</li> <li>Data Workflow Orchestration: Kestra, Prefect</li> <li>Web Scrapping: Beautiful Soup, Selenium</li> <li>Graphical User Interfaces (GUIs) / Web Clients: Tkinker, Streamlit, DearPyGUI, Gradio, Vizro, Django</li> <li>APIs: FastAPI, Litestar, Django</li> <li>Dates: Arrow</li> <li>Tests: Hypothesis</li> <li>Complex Configuration Management: Hydra</li> <li>Cloud Developer Toolkits: Power tools for AWS Lambda</li> <li>Automate testing: Nox</li> </ul>"},{"location":"otros/lineamientos/","title":"Lineamientos para contribuir a un proyecto","text":"<p>Se deben seguir los siguientes lineamientos para para contribuir al desarrollo de un proyecto. Esto garantiza que la trazabilidad y el versionamiento sean robustos.</p>"},{"location":"otros/lineamientos/#git-workflow","title":"Git Workflow","text":"<p>Se utiliza Gitflow con la siguiente estructura de branches:</p> <ul> <li> <p>main branch: solo guarda los releases oficiales. Cada release debe estar identificado con su respectivo tag que hace alusi\u00f3n a la versi\u00f3n del c\u00f3digo (ver Etiquetas (Git tags)). Este es el branch principal del proyecto. A este branch no se le pueden hacer commits directamente, par aplicar cambios en el, se debe hacer un pull request desde el dev branch o un hotfix/ branch.</p> <p>Sobre el main branch est\u00e1n configuradas unas GitHub Actions que cuidan que se apliquen las mejores pr\u00e1cticas cuando se lleve una actualizaci\u00f3n a este branch. Adem\u00e1s, se encargan de desplegar la documentaci\u00f3n en GitHub Pages.</p> </li> <li> <p>dev branch: funciona como integrador de los distintos ajustes, cambios, correcciones, mejoras o adiciones (bug fixes o features) que se est\u00e1n desarrollando. Este es el branch del que se deben crear los forks para desarrollar correcciones, mejoras o adiciones en el c\u00f3digo.</p> </li> <li> <p>bugfix/ branches: Cada correcci\u00f3n debe residir en su propio branch. Siempre se deben crear a partir del dev branch.</p> </li> <li> <p>feature/ branches: Cada nuevo cambio, mejora o adici\u00f3n debe residir en su propio branch. Siempre se deben crear a partir del dev branch.</p> </li> <li> <p>release/ branches: Cuando se tienen acumulados varios cambios, mejoras, correcciones y/o adiciones, se crea un branch de este tipo desde el dev branch. Esto inicia el ciclo de release y a partir de este momento no se pueden a\u00f1adir nuevas mejoras o cambios al c\u00f3digo, en este branch, que no est\u00e9n relacionadas con la correcci\u00f3n de errores, la documentaci\u00f3n o tareas espec\u00edficas orientadas al proceso de release.</p> </li> <li> <p>hotfix/ branches: Usadas para reparar r\u00e1pidamente errores en la versi\u00f3n de producci\u00f3n (main branch). Este es el \u00fanico branch que se puede (y debe) crear a partir del main branch. Una vez terminada la correcci\u00f3n se fusiona nuevamente (a trav\u00e9s de un pull request) con el main branch, con el release branch actual y con el dev branch. La fusi\u00f3n con el main branch debe llevar su respectiva tag con el n\u00famero de versi\u00f3n actualizado.</p> </li> </ul>"},{"location":"otros/lineamientos/#mensaje-commits","title":"Mensaje Commits","text":"<p>Es obligatorio incluir un mensaje en cada commit. El mensaje debe utilizar la siguiente plantilla:</p> <pre><code>&lt;tipo&gt;: &lt;asunto&gt; (Si se aplica, este commit...)\n|&lt;--------  Usar m\u00e1ximo 50 caracteres  ---------&gt;|\n\nExplique por qu\u00e9 se realiza el cambio.\n|&lt;----  Trate de limitar cada l\u00ednea a m\u00e1ximo 72 caracteres  ----&gt;|\n\nDescripci\u00f3n: Provea links o claves a cualquier ticket, art\u00edculo u\notro recurso relevante para el commit\nEjemplo: Issue #23\n\n---- FIN DEL COMMIT ----\n\n&lt;tipo&gt; puede ser: \n    feat     nueva caracter\u00edstica\n    data     versionamiento de datos\n    fix      correcci\u00f3n de error\n    style    formato (e.g. agregar comas que faltaban); no se cambia el c\u00f3digo\n    docs     cambios a la documentaci\u00f3n\n    test     a\u00f1adir o ajustar tests; no se cambia el c\u00f3digo de producci\u00f3n\n    chore    cambia configuraci\u00f3n CI/CD, pre-commits, etc.; no se cambia el c\u00f3digo de producci\u00f3n\n\n---------------\n\nRecuerde...\n    Empezar con may\u00fascula la l\u00ednea del asunto\n    Usar el modo imperativo en la l\u00ednea del asunto\n    No terminar la l\u00ednea del asunto con punto\n    Separar la l\u00ednea del asunto del cuerpo del commit (descripci\u00f3n) con una l\u00ednea en blanco\n    Usar el cuerpo del commit para explicar el qu\u00e9 y el por qu\u00e9, no el c\u00f3mo\n    Puede usar m\u00faltiple l\u00edneas con \"-\" para vi\u00f1etas en el cuerpo del commit\n</code></pre>"},{"location":"otros/lineamientos/#etiquetas-git-tags","title":"Etiquetas (Git tags)","text":"<p>Se usa SemVer como lineamiento para administrar y denotar el versionamiento. Para nombrar las etiquetas (tags) se debe usar la forma <code>v0.0.0</code>.</p> <p>Para ver las versiones disponibles, consulte las tags en este repositorio.</p>"}]}